!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jsc/dev/pjl/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
BUFFER_SIZE	ui.c	/^const int BUFFER_SIZE = 0x2 ^ 20;$/;"	v	typeref:typename:const int
DEFAULT_PRINTER_IP	ui.c	/^const char* DEFAULT_PRINTER_IP = "10.1.10.190";$/;"	v	typeref:typename:const char *
SOCKET_PORT	ui.c	/^const int SOCKET_PORT = 9100;   \/\/ standard printer port$/;"	v	typeref:typename:const int
START_Day	payroll.c	/^const int START_Day = 158;  \/\/ June 7, 2021$/;"	m	struct:period_data	typeref:typename:const int	file:
START_Year	payroll.c	/^const int START_Year = 2021;$/;"	m	struct:period_data	typeref:typename:const int	file:
clean	makefile	/^clean :$/;"	t
createAuthorship	data.c	/^AUTHORSHIP* createAuthorship( AUTHOR* pAuthor, SVALUE* svCustomAuthor, SVALUE* svRole, STRBUF* s/;"	f	typeref:typename:AUTHORSHIP *
createPlace	data.c	/^PLACE* createPlace( SVALUE* city, SVALUE* state, SVALUE* country, SVALUE* code, STRBUF* sbError /;"	f	typeref:typename:PLACE *
createPublication	data.c	/^PUBLICATION* createPublication( PUBLISHER* pPublisher, SVALUE* svCustomPublisher, SVALUE* svImpr/;"	f	typeref:typename:PUBLICATION *
digit_names	ui.c	/^const char* digit_names[] = { "ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EI/;"	v	typeref:typename:const char * []
freeAuthor	data.c	/^void freeAuthor( AUTHOR* pAuthor ){}$/;"	f	typeref:typename:void
freeMedia	data.c	/^void freeMedia( MEDIA* pMedia ){}$/;"	f	typeref:typename:void
freePlace	data.c	/^void freePlace( PLACE* pPlace ){}$/;"	f	typeref:typename:void
freeVendor	data.c	/^void freeVendor( VENDOR* pVendor ){}$/;"	f	typeref:typename:void
gAuthors	data.c	/^RECORDS gAuthors;$/;"	v	typeref:typename:RECORDS
gMedia	data.c	/^RECORDS gMedia;$/;"	v	typeref:typename:RECORDS
gPlaces	data.c	/^RECORDS gPlaces;$/;"	v	typeref:typename:RECORDS
gPublishers	data.c	/^RECORDS gPublishers;$/;"	v	typeref:typename:RECORDS
gVendors	data.c	/^RECORDS gVendors;$/;"	v	typeref:typename:RECORDS
getAuthorByName	data.c	/^AUTHOR* getAuthorByName( char* sBuffer, unsigned int lenBuffer, unsigned int* iOccurrence ){$/;"	f	typeref:typename:AUTHOR *
getCurrentDate_SpelledOut	ui.c	/^void getCurrentDate_SpelledOut( char* time_string ){$/;"	f	typeref:typename:void
getCurrentTimeString	ui.c	/^void getCurrentTimeString( char* time_string ){$/;"	f	typeref:typename:void
getPlace	data.c	/^PLACE* getPlace( SVALUE* s, STRBUF* sbError ){$/;"	f	typeref:typename:PLACE *
getPublisherByName	data.c	/^PUBLISHER* getPublisherByName( char* buffer, unsigned int lenBuffer, unsigned int* iOccurrence )/;"	f	typeref:typename:PUBLISHER *
getWordsForAmount	ui.c	/^STRBUF* getWordsForAmount( SVALUE* amount, STRBUF* sbError ){$/;"	f	typeref:typename:STRBUF *
giAccessionNumber	data.c	/^unsigned int giAccessionNumber = 0;$/;"	v	typeref:typename:unsigned int
interact	ui.c	/^void interact(){$/;"	f	typeref:typename:void
interact_print_check	ui.c	/^void interact_print_check( SVALUE* sPrinterIP ){$/;"	f	typeref:typename:void
interact_print_envelope	ui.c	/^void interact_print_envelope( SVALUE* sPrinterIP ){$/;"	f	typeref:typename:void
interact_print_file	ui.c	/^void interact_print_file( SVALUE* sPrinterIP ){$/;"	f	typeref:typename:void
interact_set_printer	ui.c	/^void interact_set_printer( SVALUE** sPrinterIP ){$/;"	f	typeref:typename:void
interact_test	ui.c	/^void interact_test(){$/;"	f	typeref:typename:void
is_valid_pointer	ui.c	/^bool is_valid_pointer( void *p ){$/;"	f	typeref:typename:bool
loadPayrollData	payroll.c	/^bool loadPayrollData( SVALUE* sPrinterIP, char* content_buffer, size_t ctBytesToPrint, STRBUF* s/;"	f	struct:period_data	typeref:typename:bool	file:
log_location_Aeolus	ui.c	/^char* const log_location_Aeolus = "\/home\/jsc\/aeolus\/aeolus_checks.log";$/;"	v	typeref:typename:char * const
log_location_NAMC	ui.c	/^char* const log_location_NAMC = "\/home\/jsc\/namc\/NAMC_checks.log";$/;"	v	typeref:typename:char * const
main	payroll.c	/^int main () {$/;"	f	struct:period_data	typeref:typename:int	file:
main	ui.c	/^int main( int arg_count, char* args[] ){$/;"	f	typeref:typename:int
matchPlace	data.c	/^PLACE** matchPlace( SVALUE* pattern ){$/;"	f	typeref:typename:PLACE **
period_data	payroll.c	/^struct period_data {$/;"	s	file:
pjl	makefile	/^pjl: ui.c ..\/..\/shared\/src\/jcstring.c ..\/..\/shared\/src\/termio.c$/;"	t
printBuffer2IP	ui.c	/^bool printBuffer2IP( SVALUE* sPrinterIP, char* content_buffer, size_t ctBytesToPrint, STRBUF* sb/;"	f	typeref:typename:bool
printFile2IP	ui.c	/^bool printFile2IP( SVALUE* sPrinterIP, SVALUE* sFilePath, STRBUF* sbError ){$/;"	f	typeref:typename:bool
recordDelete	data.c	/^bool recordDelete( RECORDS* recordset, unsigned int xRecordToBeDeleted, STRBUF* sbError ){$/;"	f	typeref:typename:bool
recordNew	data.c	/^bool recordNew( RECORDS* recordset, void* pNewRecord, STRBUF* sbError ){$/;"	f	typeref:typename:bool
sStatus	ui.c	/^char* sStatus = NULL;$/;"	v	typeref:typename:char *
saved_tty_mode	ui.c	/^static struct termios saved_tty_mode;$/;"	v	typeref:struct:termios	file:
set_terminal_buffered	ui.c	/^void set_terminal_buffered(){$/;"	f	typeref:typename:void
set_terminal_raw	ui.c	/^void set_terminal_raw(){$/;"	f	typeref:typename:void
teens_names	ui.c	/^const char* teens_names[] = { "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIX/;"	v	typeref:typename:const char * []
tens_names	ui.c	/^const char* tens_names[]  = { "", "TEN", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY/;"	v	typeref:typename:const char * []
testWordsForAmount	ui.c	/^void testWordsForAmount(){$/;"	f	typeref:typename:void
tm	payroll.c	/^struct tm {$/;"	s	file:
tm_hour	payroll.c	/^   int tm_hour;        \/* hours, range 0 to 23             *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_isdst	payroll.c	/^   int tm_isdst;       \/* daylight saving time             *\/	$/;"	m	struct:tm	typeref:typename:int	file:
tm_mday	payroll.c	/^   int tm_mday;        \/* day of the month, range 1 to 31  *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_min	payroll.c	/^   int tm_min;         \/* minutes, range 0 to 59           *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_mon	payroll.c	/^   int tm_mon;         \/* month, range 0 to 11             *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_sec	payroll.c	/^   int tm_sec;         \/* seconds,  range 0 to 59          *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_wday	payroll.c	/^   int tm_wday;        \/* day of the week, range 0 to 6, 0 = Sunday    *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_yday	payroll.c	/^   int tm_yday;        \/* day in the year, range 0 to 365  *\/$/;"	m	struct:tm	typeref:typename:int	file:
tm_year	payroll.c	/^   int tm_year;        \/* The number of years since 1900   *\/$/;"	m	struct:tm	typeref:typename:int	file:
tty_restore	ui.c	/^void tty_restore(){ tcsetattr( 0, TCSANOW, &saved_tty_mode ); }$/;"	f	typeref:typename:void
tty_save	ui.c	/^void tty_save(){ tcgetattr( 0, &saved_tty_mode ); }$/;"	f	typeref:typename:void
writeCheckRecord	ui.c	/^bool writeCheckRecord( char *sDataFilePath, SVALUE* sCheckNumber, SVALUE* sDate, SVALUE* sPayee,/;"	f	typeref:typename:bool
